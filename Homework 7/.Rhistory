beta_0 = 1
beta = 1
tau = 1
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
y
library("AER", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
iv_df = data.frame(y, x, t, z)
ivreg(y ~ x + t | x + z, data = iv_df)
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
summary(iv)
set.seed(0)
n = 1000
alpha_0 = .1
alpha = .2
gamma = .5
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
beta_0 = 1
beta = 1
tau = 1
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
summary(iv)
set.seed(0)
n = 1000
alpha_0 = .1
alpha = .2
gamma = .2
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
beta_0 = 10
beta = 1
tau = .2
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
summary(iv)
iv
iv.formula
summary(iv)
ivsum = summary(iv)
ibsum
ivsum
iv$coefficients
iv$residuals
ivsum
ivsum <- summary(iv)
ivsum$coefficients
ivsum$coefficients[,4]
ivsum$coefficients[,4]$t
ivsum$coefficients[,4][1]
ivsum$coefficients[,4][3]
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
return iv
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
print(iv_df)
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
return iv
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv <- ivreg(y ~ x + t | x + z, data = iv_df)
return(iv)
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv = ivreg(y ~ x + t | x + z, data = iv_df)
return (iv)
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
}
function dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
}
dgp <- function(n, alpha_0, alpha, gamma, beta_0, beta, tau)
{
x = rnorm(n, 0, 1)
z = sample(c(rep(0, n/2), rep(1, n/2)))
nu = rnorm(n, 0, 1)
eps = rnorm(n, 0, 1)
t_prob = alpha_0 + alpha * x + gamma * z + nu
for(i in 1:n)
{
prob = t_prob[i]
if(prob > 1)
{
prob = 1
}
else if(prob < 0)
{
prob = 0
}
t[i] = rbinom(1, 1, prob)
}
y = beta_0 + beta * x + tau * t + eps
iv_df = data.frame(y, x, t, z)
#10*****
iv = ivreg(y ~ x + t | x + z, data = iv_df)
return (iv)
}
sig = 0
for(i in 1:100)
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
if(pvalue < .05)
{
sig += 1
}
}
sig = 0
for(i in 1:100)
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
if(pvalue < .05)
{
sig = sig + 1
}
}
sig
tau = 1
for(i in 1:100)
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
if(pvalue < .05)
{
sig = sig + 1
}
}
sig
for(i in 1:100)
{
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
print(pvalue)
if(pvalue < .05)
{
sig = sig + 1
}
}
sig
regs = []
r = 0
for(n in seq(500, 50000, 500))
{
sig = 0
for(i in 1:100)
{
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
if(pvalue < .05)
{
sig = sig + 1
}
}
regs[r] = sig/100
r = r + 1
}
regs = seq(500, 50000, 500)
r = 0
for(n in seq(500, 50000, 500))
{
sig = 0
for(i in 1:100)
{
iv <- dgp(n, alpha_0, alpha, gamma, beta_0, beta, tau)
ivsum <- summary(iv)
pvalue <- ivsum$coefficients[,4][3]
if(pvalue < .05)
{
sig = sig + 1
}
}
regs[r] = sig/100
r = r + 1
}
regs
regs2 = regs[1:60]
regs2
qplot(seq(500, 30000, 500), regs2)
qplot(qplot(seq(500, 30000, 500), regs2, xlab = "N", ylab = "percent reject")
)
qplot(qplot(seq(500, 30000, 500), regs2)
)
qplot(seq(500, 30000, 500), regs2, xlab = "N", ylab = "percent reject")
qplot(seq(500, 30000, 500), regs2, xlab = "N", ylab = "% reject")
qplot(p, pn(.05, .8, 1, 2, p), ylab = "N", ylim = c(0, 300))
pn(.05, .8, 1, 2, .5)
pn <- function(alpha, kappa, sigma, MDE, p)
{
rhs <- MDE/(abs(qt(1 - kappa, n - 1)) + abs(qt(alpha, n - 1)))
denom <- rhs^2 * (p * (1-p))
return (sigma/denom)
}
pn(.05, .8, 1, 2, .5)
qplot(p, pn2(.05, .8, 1, 2, p, .7, .3), ylab = "N", ylim = c(0, 300))
pn2 <- function(alpha, kappa, sigma, MDE, p, c, s)
{
rhs <- MDE/(abs(qt(1 - kappa, n - 1)) + abs(qt(alpha, n - 1)))
rhs <- rhs * (c - s)
denom <- rhs^2 * (p * (1-p))
return (sigma/denom)
}
qplot(p, pn2(.05, .8, 1, 2, p, .7, .3), ylab = "N", ylim = c(0, 300))
pn2(.05, .8, 1, 2, .5, .7, .3)
read.dta(/Users/David/Dropbox/grad\ development\ micro/Problem\ Sets/PS3/Lee2008Candidate.dta)
read.dta("/Users/David/Dropbox/Development-Micro/Lee2008Candidate.dta")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
read.dta("/Users/David/Dropbox/Development-Micro/Lee2008Candidate.dta")
Lee2008Candidate <- read.dta("/Users/David/Dropbox/Development-Micro/Lee2008Candidate.dta")
Lee2008Party <- read.dta("/Users/David/Dropbox/Development-Micro/Lee2008Party.dta")
head(Lee2008Candidate)
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(rstan)
install.packages("rstan")
install.packages("tidyr")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Documents/BDA/Homework 7")
naes04 <- read.csv("naes04.csv")
naes04$ageBin <- cut(naes04$age, 16, labels = c(seq(20, 95, 5)))
by_age_gender <- group_by(naes04, ageBin, gender)
pp_naes <- summarise(by_age_gender,
count = n(),
gks = mean(as.numeric(gayKnowSomeone) - 1, na.rm = TRUE))
ageBin <- as.numeric(as.character(pp_naes$ageBin))[1:32]
gks <- pp_naes$gks[1:32]
N <- length(gks)
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks),
iter=200, chains=3)
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Documents/BDA/Homework 7")
naes04 <- read.csv("naes04.csv")
naes04$ageBin <- cut(naes04$age, 16, labels = c(seq(20, 95, 5)))
by_age_gender <- group_by(naes04, ageBin, gender)
pp_naes <- summarise(by_age_gender,
count = n(),
gks = mean(as.numeric(gayKnowSomeone) - 1, na.rm = TRUE))
ageBin <- as.numeric(as.character(pp_naes$ageBin))[1:32]
gks <- pp_naes$gks[1:32]
N <- length(gks)
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks),
iter=200, chains=3)
gender <- pp_naes$gender[1:32]
gender
gender <- as.numeric(as.character(pp_naes$gender))[1:32]
gender
as.numeric(pp_naes$gender))[1:32]
as.numeric(pp_naes$gender)[1:32]
gender <- as.numeric(pp_naes$gender)[1:32] - 1
gender
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin, N=N, gks=gks, gender=gender))
fit
gks <- gks - mean(gks)
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin, N=N, gks=gks, gender=gender))
fit
traceplot(fit)
gks
pp_naes
pp_naes$sigma_sq <- (pp_naes$gks * (1 - pp_naes$gks))/pp_naes$count
pp_naes$sigma_sq
sigma_sq <- pp_naes$sigma_sq[1:32]
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin, N=N, gks=gks, gender=gender, sigma_sq=sigma_sq))
fit
fit_sim <- stan(file="gp-sim.stan")
ageBin <- (-50:50)/10;
N <- length(ageBin);
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
fit_sim
df <- data.frame(x=x,y_sim=colMeans(fit_sim_ss$y));
plot <- qplot(x,y_sim, data=df, xlim=c(-5,5), ylim=c(-4,4));
df <- data.frame(x=ageBin,y_sim=colMeans(fit_sim_ss$y));
plot <- qplot(x,y_sim, data=df, xlim=c(-5,5), ylim=c(-4,4));
df <- data.frame(x=ageBin,y_sim=colMeans(fit_sim_ss$gks));
plot <- qplot(x,y_sim, data=df, xlim=c(-5,5), ylim=c(-4,4));
plot
fit
tau_sq <- 0.19
l_sq <- 1090.32
fit_sim <- stan(file="gp-sim.stan")
fit_sim <- stan(file="gp-sim.stan")
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks));
plot <- qplot(x,y_sim, data=df, xlim=c(-5,5), ylim=c(-4,4));
plot
ageBin <- 0:100;
ageBin <- 0:100;
N <- length(ageBin);
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks));
plot <- qplot(x,y_sim, data=df, xlim=c(-5,5), ylim=c(-4,4));
plot
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks));
plot <- qplot(x,y_sim, data=df);
plot
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks)+mean(pp_naes$gks[1:32]));
plot <- qplot(x,y_sim, data=df);
plot
ageBin <- (0:1000)/10;
N <- length(ageBin);
tau_sq <- 0.19
l_sq <- 1090.32
fit_sim <- stan(file="gp-sim.stan")
ageBin <- (0:500)/5;
fit_sim <- stan(file="gp-sim.stan")
fit_sim <- stan(file="gp-sim.stan")
fit_sim
stan(file="gp-sim.stan")
