th_hi <- th
th_lo <- th
th_hi[k] <- th[k] + e
th_lo[k] <- th[k] - e
diff[k] <- (log_p_th(th_hi, y, n, x) - log_p_th(th_lo, y, n, x))/(2 * e)
}
return (diff)
}
gradient_th_numerical(c(1, 1), y, n, x)
gradient_th <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
first_term <- inv.logit(- (alpha + beta * x))
d_alpha <- sum(n * inv.logit(- (alpha + beta * x)) + y)
d_beta <- sum((n * x * (first_term)) + (y * x))
return (c(d_alpha, d_beta))
}
gradient_th(c(1, 1), y, n, x)
gradient_th_numerical(c(1, 1), y, n, x)
gradient_th <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
first_term <- inv.logit(- (alpha + beta * x))
d_alpha <- sum(n * inv.logit(- (alpha + beta * x)) + y)
d_beta <- sum((n * x * inv.logit(- (alpha + beta * x))) + (y * x))
return (c(d_alpha, d_beta))
}
gradient_th_numerical(c(1, 1), y, n, x)
gradient_th(c(1, 1), y, n, x)
gradient_th <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
d_alpha <- sum(n * inv.logit(alpha + beta * x) + y)
d_beta <- sum(x * (n * inv.logit(alpha + beta * x) + y))
return (c(d_alpha, d_beta))
}
gradient_th(c(1, 1), y, n, x)
inv.logit(2)
exp(2)/(1+exp(2))
gradient_th(c(2, 2), y, n, x)
gradient_th_numerical(c(2, 2), y, n, x)
log_p_th2 <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
log_prior <- 0
log_likelihood <- sum(y(alpha + beta * x) + n * log(1 + exp(alpha + beta * x)))
return (log_likelihood + log_prior)
}
log_p_th(c(1, 1), y, n, x)
log_p_th2(c(1, 1), y, n, x)
log_p_th2 <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
log_prior <- 0
log_likelihood <- sum(y * (alpha + beta * x) + n * log(1 + exp(alpha + beta * x)))
return (log_likelihood + log_prior)
}
log_p_th2(c(1, 1), y, n, x)
log_p_th2 <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
log_prior <- 0
log_likelihood <- sum(y * (alpha + beta * x) - n * log(1 + exp(alpha + beta * x)))
return (log_likelihood + log_prior)
}
log_p_th2(c(1, 1), y, n, x)
gradient_th <- function(th, y, n, x){
alpha <- th[1]
beta <- th[2]
d_alpha <- sum(y - n * inv.logit(alpha + beta * x))
d_beta <- sum(x * (y - n * inv.logit(alpha + beta * x)))
return (c(d_alpha, d_beta))
}
gradient_th(c(1, 1), y, n, x)
gradient_th_numerical(c(1, 1), y, n, x)
parameter_names <- c("alpha", "beta")
d <- length(parameter_names)
chains <- 4
mass_vector <- rep(1/15 ^ 2, d)
starts <- array(NA, c(chains, d), dimnames = list(NULL, parameter_names))
starts
for (j in 1:chains) {
starts[j,] <- rnorm(d, 0, 15)
starts[j, 10] <- runif(1, 0, 15)
}
for (j in 1:chains) {
starts[j,] <- rnorm(d, 0, 15)
}
starts
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_iteration <- function(th, y, n, x, epsilon, L, M) {
M_inv <- 1/M
d <- length(th)
phi <- rnorm (d, 0, sqrt(M))
th_old <- th
log_p_old <- log_p_th (th, y, n, x) - 0.5 * sum(M_inv * phi ^ 2)
phi <- phi + 0.5 * epsilon * gradient_th(th, y, n, x)
for (l in 1:L) {
th <- th + epsilon * M_inv * phi
phi <- phi + (if (l == L) 0.5 else 1) * epsilon * gradient_th(th, y, n, x)
}
phi <- -phi
log_p_star <- log_p_th(th, y, n, x) - 0.5 * sum(M_inv * phi ^ 2)
r <- exp(log_p_star - log_p_old)
if(is.nan(r)) r <- 0
p_jump <- min(r, 1)
th_new <- if (runif(1)) < p_jump) th else th_old
return (list (th = th_new, p_jump = p_jump))
}
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, sigma, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
monitor (sims, warmup)
cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2) "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_iteration <- function(th, y, n, x, epsilon, L, M) {
M_inv <- 1/M
d <- length(th)
phi <- rnorm (d, 0, sqrt(M))
th_old <- th
log_p_old <- log_p_th (th, y, n, x) - 0.5 * sum(M_inv * phi ^ 2)
phi <- phi + 0.5 * epsilon * gradient_th(th, y, n, x)
for (l in 1:L) {
th <- th + epsilon * M_inv * phi
phi <- phi + (if (l == L) 0.5 else 1) * epsilon * gradient_th(th, y, n, x)
}
phi <- -phi
log_p_star <- log_p_th(th, y, n, x) - 0.5 * sum(M_inv * phi ^ 2)
r <- exp(log_p_star - log_p_old)
if(is.nan(r)) r <- 0
p_jump <- min(r, 1)
th_new <- if (runif(1) < p_jump) th else th_old
return (list (th = th_new, p_jump = p_jump))
}
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, sigma, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
monitor (sims, warmup)
cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2) "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, sigma, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
#monitor (sims, warmup)
#cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2) "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, n, x, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
#monitor (sims, warmup)
#cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2) "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, n, x, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
monitor (sims, warmup)
#cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2) "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, n, x, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
monitor (sims, warmup)
cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2), "\n")
return (list(sims = sims, p_jump = p_jump))
}
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
install.packages("arm")
library("arm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("arm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
mass_vector <- c(1, 1 / (5.5 ^ 2))
mass_vector
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
parameter_names <- c("alpha", "beta")
d <- length(parameter_names)
chains <- 4
mass_vector <- rep(1/15 ^ 2, d)
mass_vector <- c(1, 1 / (5.5 ^ 2))
starts <- array(NA, c(chains, d), dimnames = list(NULL, parameter_names))
for (j in 1:chains) {
starts[j,] <- rnorm(d, 0, 15)
}
starts
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .2, L_0 = 5, M = mass_vector)
hmc_run(starting_values = starts, iter = 20, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run <- function(starting_values, iter, epsilon_0, L_0, M) {
chains <- nrow(starting_values)
d <- ncol (starting_values)
sims <- array(NA, c(iter, chains, d), dimnames = list(NULL, NULL, colnames(starting_values)))
warmup <- 0.5 * iter
p_jump <- array(NA, c(iter, chains))
for (j in 1:chains) {
th <- starting_values[j,]
for (t in 1:iter) {
epsilon <- runif(1, 0, 2 * epsilon_0)
L <- ceiling(2 * L_0 * runif(1))
temp <- hmc_iteration(th, y, n, x, epsilon, L, M)
p_jump[t, j] <- temp$p_jump
sims[t, j, ] <- temp$th
th <- temp$th
}
}
monitor (sims, warmup)
cat("Avg acceptance probs:", fround(colMeans(p_jump[(warmup + 1):iter,]), 2), "\n")
#return (list(sims = sims, p_jump = p_jump))
}
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = 1, L_0 = 1, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
mass_vector <- c(1/ (1.5 ^ 2), 1 / (5.5 ^ 2))
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
mass_vector <- c(1/ (1.06 ^ 2), 1 / (5.57 ^ 2))
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
mass_vector <- rep(1/15 ^ 2, d)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .1, L_0 = 10, M = mass_vector)
mass_vector <- c(1/ (1.5 ^ 2), 1 / (5.57 ^ 2))
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .1, L_0 = 10, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .2, L_0 = 5, M = mass_vector)
hmc_run(starting_values = starts, iter = 100, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 600, epsilon_0 = .5, L_0 = 2, M = mass_vector)
hmc_run(starting_values = starts, iter = 500, epsilon_0 = .5, L_0 = 2, M = mass_vector)
setwd("~/Documents/BDA/Homework 7")
naes04 <- read.csv("naes04.csv")
head(naes04)
detach("package:arm", unload=TRUE)
install.packages("dplyr")
library(dplyr)
install.packages("tidyr")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
head(naes05)
head(naes04)
naes04$ageBin <- age/2
naes04$ageBin <- naes04$age/2
naes04
min(naes04$age)
naes04$age
cut(naes04$age)
cut(naes04$age, 10)
97 - 18
80/5
cut(naes04$age, 16)
naes04$age
min(naes04$age)
min(as.numeric(naes04$age))
type(naes04$age)
typeof(naes04$age)
cut(naes04$age, 16, labels = c(seq(20, 95, 5)))
naes04$ageBin <- cut(naes04$age, 16, labels = c(seq(20, 95, 5)))
naes04$ageBin
naes04
head(naes04)
group_by(naes04, ageBin, gender)
by_age_gender <- group_by(ageBin, gender)
summarise(by_age_gender,
count <- n()
gks <- mean(gayKnowSomeone))
by_age_gender <- group_by(naes04, ageBin, gender)
summarise(by_age_gender,
count <- n()
gks <- mean(gayKnowSomeone))
summarise(by_age_gender,
gks <- mean(gayKnowSomeone))
by_age_gender <- group_by(naes04, ageBin, gender)
summarise(by_age_gender,
gks <- mean(gayKnowSomeone, na.rm = TRUE))
by_age_gender <- group_by(naes04, ageBin, gender)
summarise(by_age_gender,
gks = mean(gayKnowSomeone, na.rm = TRUE))
head(naes04)
mean(naes04$gayKnowSomeone, na.rm = TRUE)
naes04$gayKnowSomeone
mean(naes04$gayKnowSomeone, na.rm = TRUE)
summarise(by_age_gender,
count = n()
gks = mean(gayKnowSomeone, na.rm = TRUE))
summarise(by_age_gender,
count = n(),
gks = mean(gayKnowSomeone, na.rm = TRUE))
as.numeric(gayKnowSomeone)
as.numeric(naes04$gayKnowSomeone)
naes04$gayKnowSomeone
summarise(by_age_gender,
count = n(),
gks = mean(gayKnowSomeone - 1, na.rm = TRUE))
summarise(by_age_gender,
count = n(),
gks = mean(as.numeric(gayKnowSomeone) - 1, na.rm = TRUE))
ageBin <- naes04$ageBin
gks <- naes04$gks
length(gks)
pp_naes <- summarise(by_age_gender,
count = n(),
gks = mean(as.numeric(gayKnowSomeone) - 1, na.rm = TRUE))
ageBin <- pp_naes$ageBin
gks <- pp_naes04$gks
ageBin <- pp_naes$ageBin
gks <- pp_naes$gks
gks
length(gks)
fit("HW7.stan")
library(rstan)
stan("HW7.stan")
N <- length(gks)
stan("HW7.stan")
typeof(N)
stan("HW7.stan")
gks
ageBin
as.numeric(ageBin)
as.numeric(as.character(ageBin))
ageBin <- as.numeric(as.character(pp_naes$ageBin))
gks <- pp_naes$gks
N <- length(gks)
typeof(gks)
stan("HW7.stan")
N <-
101L
x <-
c(-5, -4.9, -4.8, -4.7, -4.6, -4.5, -4.4, -4.3, -4.2, -4.1, -4,
-3.9, -3.8, -3.7, -3.6, -3.5, -3.4, -3.3, -3.2, -3.1, -3, -2.9,
-2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2, -1.9, -1.8,
-1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1, -0.9, -0.8, -0.7,
-0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5,
0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8,
1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1,
3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4,
4.5, 4.6, 4.7, 4.8, 4.9, 5)
y <-
c(1.04442478194401, 0.948306088493654, 0.357037759697332, 0.492336514646604,
0.520651364364746, 0.112629866592809, 0.470995468454158, -0.168442254267804,
0.0720344402575861, -0.188108980535916, -0.0160163306512027,
-0.0388792158617705, -0.0600673630622568, 0.113568725264636,
0.447160403837629, 0.664421188556779, -0.139510743820276, 0.458823971660986,
0.141214654640904, -0.286957663528091, -0.466537724021695, -0.308185884317105,
-1.57664872694079, -1.44463024170082, -1.51206214603847, -1.49393593601901,
-2.02292464164487, -1.57047488853653, -1.22973445533419, -1.51502367058357,
-1.41493587255224, -1.10140254663611, -0.591866485375275, -1.08781838696462,
-0.800375653733931, -1.00764767602679, -0.0471028950122742, -0.536820626879737,
-0.151688056391446, -0.176771681318393, -0.240094952335518, -1.16827876746502,
-0.493597351974992, -0.831683011472805, -0.152347043914137, 0.0190364158178343,
-1.09355955218051, -0.328157917911376, -0.585575679802941, -0.472837120425201,
-0.503633622750049, -0.0124446353828312, -0.465529814250314,
-0.101621725887347, -0.26988462590405, 0.398726664193302, 0.113805181040188,
0.331353802465398, 0.383592361618461, 0.431647298655434, 0.580036473774238,
0.830404669466897, 1.17919105883462, 0.871037583886711, 1.12290553424174,
0.752564860804382, 0.76897960270623, 1.14738839410786, 0.773151715269892,
0.700611498974798, 0.0412951045437818, 0.303526087747629, -0.139399513324585,
-0.862987735433697, -1.23399179134008, -1.58924289116396, -1.35105117911049,
-0.990144529089174, -1.91175364127672, -1.31836236129543, -1.65955735224704,
-1.83516148300526, -2.03817062501248, -1.66764011409214, -0.552154350554687,
-0.547807883952654, -0.905389222477036, -0.737156477425302, -0.40211249920415,
0.129669958952991, 0.271142753510592, 0.176311762529962, 0.283580281859344,
0.635808289696458, 1.69976647982837, 1.10748978734239, 0.365412229181044,
0.788821368082444, 0.879731888124867, 1.02180766619069, 0.551526067300283
)
stan(gp-fit.stan)
stan("gp-fit.stan")
setwd("~/Documents/BDA/Homework 7")
stan("gp-fit.stan")
fit_fit <- stan(file="gp-fit.stan", data=list(x=x,N=N,y=y),
iter=200, chains=3);
fit_fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks),
iter=200, chains=3);
gks
pp_naes
pp_naes$NA
ageBin[1:32]
ageBin <- as.numeric(as.character(pp_naes$ageBin))[1:32]
gks <- pp_naes$gks[1:32]
N <- length(gks)
stan("HW7.stan")
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks),
iter=200, chains=3)
fit
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks),
iter=200, chains=3)
fit
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks))
fit
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks))
fit
plot(fit)
traceplot(fit)
fit <- stan(file="HW7.stan", data=list(ageBin=ageBin,N=N,gks=gks))
fit
ageBin <- (0:500)/5;
N <- length(ageBin);
tau_sq <- 0.19
l_sq <- 1090.32
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks)+mean(pp_naes$gks[1:32]));
plot <- qplot(x,y_sim, data=df);
library(rstan)
library(dplyr)
ageBin <- (0:500)/5;
N <- length(ageBin);
tau_sq <- 0.19
l_sq <- 1090.32
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks)+mean(pp_naes$gks[1:32]));
plot <- qplot(x,y_sim, data=df);
setwd("~/Documents/BDA/Homework 7")
ageBin <- (0:500)/5;
N <- length(ageBin);
tau_sq <- 0.19
l_sq <- 1090.32
fit_sim <- stan(file="gp-sim.stan")
fit_sim_ss <- extract(fit_sim, permuted=TRUE)
df <- data.frame(x=ageBin, y_sim=colMeans(fit_sim_ss$gks)+mean(pp_naes$gks[1:32]));
plot <- qplot(x,y_sim, data=df);
library(ggplot2)
